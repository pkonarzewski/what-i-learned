
#%% PROBLEM 1
"""
PROBLEM 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
"""

# simple
def problem1_simple(n):
    result = 0

    for i in range(1, n):
        if i % 3 == 0 or i % 5 == 0:
            result += i
    return result

assert problem1_simple(10) == 23
print(problem1_simple(1000))


# functional approach
assert sum([x for x in range(1,10) if x % 3 == 0 or x % 5 == 0]) == 23
print(sum([x for x in range(1,10) if x % 3 == 0 or x % 5 == 0]))


# using geometric/arithmetic aproach sequence
def problem1_alternative(n, p):
    N = (p-1) // n
    return n*(N*(N+1)//2)

assert problem1_alternative(3, 10) + problem1_alternative(5, 10) - problem1_alternative(15, 10) == 23
print(problem1_alternative(3, 1000) + problem1_alternative(5, 1000) - problem1_alternative(15, 1000))


# BENCHMARK
bench_n = 100000
print('simple, complexity O(n)')
%timeit problem1_simple(bench_n)
print('functional, complexity O(n)')
%timeit sum([x for x in range(1, bench_n) if x % 3 == 0 or x % 5 == 0])
print('alternative, complexity O(1)')
%timeit problem1_alternative(3, bench_n) + problem1_alternative(5, bench_n) - problem1_alternative(15, bench_n)


#%% PROBLEM 2
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""

def fib_even(n):
    a, b = 1, 1
    fib_sum = 0
    while True:
        a, b = b, a + b  # variable swaping
        if b > n:
            break
        elif b % 2 == 0:
            fib_sum += b
    return fib_sum


assert fib_even(4000000) == 4613732


def fib_golden_ratio(n):
    """
    Phi (golden ratio) is the approximate ratio between
    two consecutive terms in a Fibonacci sequence.
    The ratio between consecutive even terms approaches
    phi^3 (4.236068) because each 3rd term is even.
    Use a calculator and round the results to the nearest
    integer when calculating the next terms:

    2,8,34,.. multiplying by 4.236068 each time: 144,610,
    2584,10946,46368,196418 & 832040
    """
    a = 2
    sum = 2
    phi = 4.236068

    while True:
        a = round(a*phi)
        if a < n:
            sum += a
        else:
            break
    return sum

assert fib_golden_ratio(4000000) == 4613732


# BENCHMARK
print('simple O(n)')
%timeit fib_even(1000000)
print('golden ratio O(n)')
%timeit fib_golden_ratio(1000000)


#%% PROBLEM 3
"""
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
"""

def largest_factorial(n):
    return n

print(largest_factorial(600851475143))
